#!/bin/bash

# This script attempts to garbage collect docker containers and images.
# Containers that exited more than an hour ago are removed.
# Images that have existed more than an hour and are not in use by any
# containers are removed.

# Note: Although docker normally prevents removal of images that are in use by
#       containers, we take extra care to not remove any image tags (e.g.
#       ubuntu:14.04, busybox, etc) that are used by containers. A naive
#       "docker rmi `docker images -q`" will leave images stripped of all tags,
#       forcing users to re-pull the repositories even though the images
#       themselves are still on disk.

# Note: State is stored in $STATE_DIR, defaulting to /var/run/docker-gc

set -o nounset
set -o errexit

# Seconds since last file modification
function FileAge() {
  echo $((`date +%s` - `stat -c %Y $1`))
}

# Convert seconds to hours
function SecondsToHours() {
  echo -n "$(($1/3600))"
}

FORCE=

while getopts ":f" opt; do
  case $opt in
    f)
      FORCE=1
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      ;;
  esac
done

STATE_DIR=${STATE_DIR:=/var/run/docker-gc}

cd "$STATE_DIR"

# Check that the last docker gc was performed more than an hour ago
if [[ $FORCE ]]; then
  echo "Forcing docker gc"
else
  if [[ ! -a lastgc ]]; then
    touch lastgc
    echo "First docker gc run, not performing docker gc"
    exit 0
  else
    echo "Last docker gc $(SecondsToHours $(FileAge lastgc)) hour(s) ago"
    if ! test `find lastgc -mmin +60`; then
      echo "Too soon to perform docker gc"
      exit 0
    else
      echo "Performing docker gc"
    fi
  fi
fi

DOCKER=${DOCKER:=docker}

# Verify that docker is reachable
$DOCKER version 1>/dev/null

# List all currently existing containers
$DOCKER ps -a -q --no-trunc | sort | uniq > containers.all

# List running containers
$DOCKER ps -q --no-trunc | sort | uniq > containers.running

# List containers that are not running
comm -23 containers.all containers.running > containers.exited

# List containers to reap. These are containers that were not running last time
# and are still not running.
touch containers.exited.prev
comm -12 containers.exited containers.exited.prev > containers.reap
mv containers.exited containers.exited.prev

# List containers that we will keep.
comm -23 containers.all containers.reap > containers.keep

# List images used by containers that we keep.
# This may be both image id's and repo/name:tag, so normalize to image id's only
cat containers.keep |
xargs -r -n 1 docker inspect -f '{{.Config.Image}}' 2>/dev/null |
sort | uniq |
xargs -r -n 1 docker inspect -f '{{.Id}}' 2>/dev/null |
sort | uniq > images.used

# List images to reap; images that existed last run and are not in use.
touch images.all.prev
$DOCKER images -q --no-trunc | sort | uniq > images.all
comm -23 images.all.prev images.used > images.reap
mv images.all images.all.prev

# Reap containers.
xargs -r -n 1 $DOCKER rm --volumes=true < containers.reap &>/dev/null

# Reap images.
xargs -r -n 1 $DOCKER rmi < images.reap &>/dev/null

# Update lastgc timestamp
touch lastgc
